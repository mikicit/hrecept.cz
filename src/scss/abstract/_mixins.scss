@use "sass:math";

/**
 * Typography
 */

 @mixin typo($preset) {
    @if(map-has-key($typography, $preset)) {
        @each $key, $value in map-get($typography, $preset) {
            #{$key}: #{$value};
        }
    } @else {
        @warn 'Error';
    }
}


/**
 * Z-Index
 */

@mixin make-z-index($z-layer) {
    @if(map-has-key($z-layers, $z-layer)) {
        z-index: map-get($z-layers, $z-layer);
    } @else {
        @warn 'Error';
    }
}


/**
 * List Unstyled
 *
 * Unstyled keeps list items block level, just removes default browser padding and list-style
 */

@mixin list-unstyled() {
    padding-left: 0;
    margin-top: 0;
    margin-bottom: 0;
    list-style: none;
}


/**
 * Breakpoint
 */

@mixin media-breakpoint-up($breakpoint, $breakpoints: $grid-breakpoints) {
    @if(map-has-key($breakpoints, $breakpoint)) {
        @if(map-get($breakpoints, $breakpoint) != 0) {
            @media (min-width: map-get($breakpoints, $breakpoint)) {
                @content;
            }
        } @else {
            @content;
        }
    } @else {
        @warn 'Error';
    }
}
  
@mixin media-breakpoint-down($breakpoint, $breakpoints: $grid-breakpoints) {
    @if(map-has-key($breakpoints, $breakpoint)) {
        @if (map-get($breakpoints, $breakpoint) != 0) {
            @media (max-width: map-get($breakpoints, $breakpoint) - 0.02px) {
                @content;
            }
        } @else {
            @warn 'Breakpoint must be greater than 0';
        }
    } @else {
        @warn '#{$breakpoint} key does not exist in #{$breakpoints}';
    }
}


/**
 * Containers
 */

@mixin make-container() {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
    @include make-container-padding();
}

@mixin make-container-padding($container-padding: $container-padding, $breakpoints: $grid-breakpoints) {
    @each $key, $value in $container-padding {
        @include media-breakpoint-up($key) {
            padding-left: $value;
            padding-right: $value;
        }
    }
}

@mixin make-container-width($size: "normal", $container-width: $container-width, $max-container-padding: $max-container-padding) {
    @if(map-has-key($container-width, $size)) {
        max-width: map-get($container-width, $size) + $max-container-padding * 2;
    }
}

@mixin container-width($size, $container-width: $container-width) {
    @if(map-has-key($container-width, $size)) {
        max-width: map-get($container-width, $size);
    }
}