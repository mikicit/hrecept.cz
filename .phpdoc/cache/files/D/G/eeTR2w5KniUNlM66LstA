1673196834
waR3U4bTeM%3A023f48b1a40bb389db8af8396322277f-153d0405bd1fbcd39859707202b7d1a7
s:43524:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"153d0405bd1fbcd39859707202b7d1a7";s:39:" phpDocumentor\Reflection\Php\File name";s:10:"recipe.php";s:39:" phpDocumentor\Reflection\Php\File path";s:28:"controller/recipe/recipe.php";s:41:" phpDocumentor\Reflection\Php\File source";s:18628:"<?php 

/**
 * ControllerRecipeRecipe
 * 
 * The controller is responsible for the recipe pages.
 */
class ControllerRecipeRecipe extends Controller
{
    /**
     * Processing get and post requests on the recipes page.
     * 
     * @param array $data
     * 
     * @return void
     */
    public function index($data = [])
    {  
        $model_recipe = new ModelRecipeRecipe();

        ## Handling and Filtering Request Variables

        ## Default query vars
        $query_vars = [
            'per_page' => 9,
            'page'     => 1
        ];

        ## Ingredients and Categories filtering
        $filter_function = function($item) {
            return filter_var($item, FILTER_VALIDATE_INT, ['options' => ['min_range' => 1]]);
        };

        if (isset($_GET['ingredients']) && is_array($_GET['ingredients'])) {
            $filtered_ingredients = array_filter($_GET['ingredients'], $filter_function);
            if ($filtered_ingredients) $query_vars['ingredients'] =  $filtered_ingredients;
        }

        if (isset($_GET['categories']) && is_array($_GET['categories'])) {
            $filtered_categories = array_filter($_GET['categories'], $filter_function);
            if ($filtered_categories) $query_vars['categories'] =  $filtered_categories;
        }

        ## Search filtering
        if (isset($_GET['search']) && is_string($_GET['search'])) {
            $filtered_search = filter_var($_GET['search'], FILTER_SANITIZE_STRING);
            $query_vars['search'] = $filtered_search;
        }
        
        ## Defining maximum pages for pagination
        $max_pages = ceil($model_recipe->getQuantity($query_vars) / $query_vars['per_page']);
        
        ## Page var filtering
        if (isset($_GET['page']) && is_string($_GET['page'])) {
            $filter_page = filter_var($_GET['page'], FILTER_VALIDATE_INT, ['options' => ['min_range' => 1, 'max_range' => $max_pages]]);
            if (!$filter_page) {
                $not_found = new ControllerErrorNotfound();
                $not_found->index();
            }
            $query_vars['page'] = $filter_page;
        }

        ## Sorting vars filtering
        $available_vars_sorted_by = ['name', 'date', 'rating'];

        if (isset($_GET['sort_by']) && is_string($_GET['sort_by'])) {
            if (in_array($_GET['sort_by'], $available_vars_sorted_by)) {
                $query_vars['sort_by'] = $_GET['sort_by'];
            }
        }

        if (isset($_GET['sort_d']) && is_string($_GET['sort_d'])) {
            if ($_GET['sort_d'] == 'asc' || $_GET['sort_d'] == 'desc') {
                $query_vars['sort_d'] = $_GET['sort_d'];
            }
        }

        ## Getting all data
        $data['ingredients'] = $model_recipe->getAllIngredients();
        $data['categories']  = $model_recipe->getAllCategories();
        $data['recipes']     = $model_recipe->getAll($query_vars);

        ## Pagination
        $data['pagination'] = [];

        if ($max_pages > 1) {
            if ($query_vars['page'] > 1) {
                $data['pagination']['prev'] = Url::setVars(Url::getCurrentUrl(), ['page' => $query_vars['page'] - 1]);
            }
    
            if ($query_vars['page'] < $max_pages) {
                $data['pagination']['next'] = Url::setVars(Url::getCurrentUrl(), ['page' => $query_vars['page'] + 1]);
            }
    
            for ($i = 1; $i <= $max_pages; $i++) {
                $data['pagination']['items'][] = [
                    'page' => $i,
                    'link' => Url::setVars(Url::getCurrentUrl(), ['page' => $i]),
                    'current' => $query_vars['page'] == $i
                ];
            }
        }

        ## generating sorting links
        $data['sorting_links'] = [
            'date_desc' => [
                'name' => 'Date (new to old)',
                'href' => Url::setVars(Url::getCurrentUrl(), ['sort_by' => 'date', 'sort_d' => 'desc']),
                'active' => false
            ],
            'date_asc' => [
                'name' => 'Date (old to new)',
                'href' => Url::setVars(Url::getCurrentUrl(), ['sort_by' => 'date', 'sort_d' => 'asc']),
                'active' => false
            ],
            'name_asc' => [
                'name' => 'Name (A to Z)',
                'href' => Url::setVars(Url::getCurrentUrl(), ['sort_by' => 'name', 'sort_d' => 'asc']),
                'active' => false
            ],
            'name_desc' => [
                'name' => 'Name (Z to A)',
                'href' => Url::setVars(Url::getCurrentUrl(), ['sort_by' => 'name', 'sort_d' => 'desc']),
                'active' => false
            ],
            'rating_desc' => [
                'name' => 'Rating (high to low)',
                'href' => Url::setVars(Url::getCurrentUrl(), ['sort_by' => 'rating', 'sort_d' => 'desc']),
                'active' => false
            ],
            'rating_asc' => [
                'name' => 'Rating (low to high)',
                'href' => Url::setVars(Url::getCurrentUrl(), ['sort_by' => 'rating', 'sort_d' => 'asc']),
                'active' => false
            ],
        ];

        ## making active sort link
        if (isset($query_vars['sort_by']) && isset($query_vars['sort_d'])) {
            $sorting_query_string = $query_vars['sort_by'] . '_' . $query_vars['sort_d'];
            $data['sorting_links'][$sorting_query_string]['active'] = true;
        }

        ## providing filtered query vars
        $data['query_vars'] = $query_vars;

        $this->document->setTitle('Recipes');

        $header = new ControllerCommonHeader();
        $footer = new ControllerCommonFooter();

        $data['header'] = $header->index([
            'query_vars' => $data['query_vars']
        ]);
        $data['footer'] = $footer->index();
        
        $this->response->setOutput($this->view->get('recipe/recipes', $data));
    }

    /**
     * Processing get and post requests on the recipe page.
     * 
     * @param mixed $query_vars
     * 
     * @return void
     */
    public function show($query_vars)
    {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            $data = [];

            ## generating a token for the login form
			$data['token'] = $this->response->setToken();

            $model_recipe = new ModelRecipeRecipe();
            $model_review = new ModelRecipeReview();

            $data['recipe'] = $model_recipe->get($query_vars['id']);
            $data['user'] = $this->user->getCurrentUser();

            if (!$data['recipe']) {
                $not_found = new ControllerErrorNotfound();
                $not_found->index();
            }

            $data['review_quantity'] = $model_review->getQuantity($query_vars);

            ## reviews pagination
            $data['next_reviews'] = '';
            
            $review_pagination = [
                'per_page' => 3,
                'page' => 1
            ];

            $max_pages = ceil($data['review_quantity'] / $review_pagination['per_page']);

            ## Page var filtering
            if (isset($_GET['page']) && is_string($_GET['page'])) {
                $filter_page = filter_var($_GET['page'], FILTER_VALIDATE_INT, ['options' => ['min_range' => 1, 'max_range' => $max_pages]]);
                if (!$filter_page) {
                    $not_found = new ControllerErrorNotfound();
                    $not_found->index();
                }
                $review_pagination['page'] = $filter_page;
            }

            if ($review_pagination['page'] < $max_pages) {
                $data['next_reviews'] = Url::setVars(Url::getCurrentUrl(), ['page' => $review_pagination['page'] + 1]) . '#reviews';
            }

            $data['reviews'] = $model_review->get([
                'id' => $query_vars['id'],
                'per_page' => $review_pagination['per_page'],
                'page' => $review_pagination['page']
            ]);

            $data['ingredients'] = $model_recipe->getIngredients($query_vars['id']);
            $data['categories'] = $model_recipe->getCategories($query_vars['id']);

            ## session form data
            if (isset($_SESSION['form_data'])) {
                $data['form_data'] = $_SESSION['form_data'];
                unset($_SESSION['form_data']);
            }

            $this->document->setTitle($data['recipe']['title']);

            $header = new ControllerCommonHeader();
            $footer = new ControllerCommonFooter();

            $this->document->addStyle(Url::getUrl('/public/css/print.css'), ['media' => 'print']);

            $data['header'] = $header->index();
            $data['footer'] = $footer->index();

            $this->response->setOutput($this->view->get('recipe/recipe', $data));
        } 
        elseif ($_SERVER['REQUEST_METHOD'] == 'POST') 
        {   
            if (isset($_POST['add-review'])) {
                if (!($this->user->getCurrentUser())) {
                    $this->response->setResponseCode(403);
                    die();
                };

                ## Checking token
				if (!isset($_SESSION['token']) || !isset($_POST['token']) || $_SESSION['token'] !== $_POST['token']) {
					$this->response->redirect(Url::getCurrentUrl());
				}

                $this->response->unsetToken();

                $model_review = new ModelRecipeReview();
                $user = $this->user->getCurrentUser();
                
                ## Removing html tags and spaces
                $data['review'] = isset($_POST['review']) ? preg_replace('/[\s]{2,}/', ' ', trim(htmlspecialchars($_POST['review']))) : '';
                $data['rating'] = isset($_POST['rating']) ? $_POST['rating'] : '';

                ## Validation
                $data['validation'] = [];

                ## Review
                $data['validation']['review'] = (function(& $data) {
                    if (strlen($data['review']) < 2) {
                        return 'Review must not be shorter than 2 characters.';
                    }
        
                    if (strlen($data['review']) > 500) {
                        return 'Review must not be longer than 500 characters.';
                    }
                })($data);

                ## Rating
                $data['validation']['rating'] = (function(& $data) {
                    if (empty($data['rating'])) {
                        return 'Please select a rating.';
                    }

                    $is_integer = filter_var($data['rating'], FILTER_VALIDATE_INT);
                    if (!$is_integer) {
                        return 'The score must be an integer.';
                    }

                    if ($data['rating'] < 1 || $data['rating'] > 5) {
                        return 'Rating must be between 1 and 5.';
                    }
                })($data);

                ## Deleting fields without errors
                $data['validation'] = array_filter($data['validation'], function($value) { return !empty($value); });

                if (empty($data['validation'])) {
                    $result = $model_review->add([
                        'user_id'   => $user['user_id'],
                        'recipe_id' => $query_vars['id'],
                        'review'    => $data['review'],
                        'rating'    => $data['rating'],
                    ]);
                    if ($result) {
                        $_SESSION['form_data']['success'] = 'The review was successfully submitted.';
                        $this->response->redirect(Url::getCurrentUrl() . '#review-section');
                    }
                    $data['error'] = 'Something went wrong.';
                }

                $_SESSION['form_data'] = $data;
                $this->response->redirect(Url::getCurrentUrl() . '#review-section');
            }
        }
    }

    /**
     * Processing get and post requests on the recipe add page.
     * 
     * @param array $data
     * 
     * @return void
     */
    public function add($data = [])
    {
        if (!($this->user->getCurrentUser()) || $this->user->getCurrentUser()['user_group_id'] != 1) {
            $this->response->redirect(Url::getUrl('/'));
        }

        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            ## generating a token for the login form
			$data['token'] = $this->response->setToken();

            $model_recipe = new ModelRecipeRecipe();

            $data['ingredients'] = $model_recipe->getAllIngredients();
            $data['categories'] = $model_recipe->getAllCategories();

            ## session form data
            if (isset($_SESSION['form_data'])) {
                $data['form_data'] = $_SESSION['form_data'];
                unset($_SESSION['form_data']);
            }

            $this->document->setTitle('Add Recipe');

            $header = new ControllerCommonHeader();
            $footer = new ControllerCommonFooter();
        
            $data['header'] = $header->index();
            $data['footer'] = $footer->index();

            $this->response->setOutput($this->view->get('recipe/add', $data));
        } 
        elseif ($_SERVER['REQUEST_METHOD'] == 'POST') 
        {
            if (isset($_POST['add-recipe'])) {
                 ## Checking token
				if (!isset($_SESSION['token']) || !isset($_POST['token']) || $_SESSION['token'] !== $_POST['token']) {
					$this->response->redirect(Url::getCurrentUrl());
				}

                $this->response->unsetToken();
                
                $model_recipe = new ModelRecipeRecipe();

                ## Removing html tags and spaces
                $data['title']       = isset($_POST['title']) ? trim(htmlspecialchars($_POST['title'])) : '';
                $data['description'] = isset($_POST['description']) ? trim(htmlspecialchars($_POST['description'])) : '';
                $data['ingredients'] = isset($_POST['ingredients']) && is_array($_POST['ingredients']) ? $_POST['ingredients'] : [];
                $data['categories']  = isset($_POST['categories']) && is_array($_POST['categories']) ? $_POST['categories'] : [];
                $data['images']      = isset($_FILES['images']) && is_array($_FILES['images']) ? $_FILES['images'] : [];

                ## Validation
                $data['validation'] = [];

                ## Images
                $data['validation']['images'] = (function(& $data) {
                    if (empty($data['images'])) {
                        return 'Images are required.';
                    }

                    if (!is_array($data['images']['name'])) {
                        return 'Something went wrong.';
                    }

                    if (empty($data['images']['name'][0])) {
                        return 'Images are required.';
                    }

                    ## Errors
                    foreach ($data['images']['error'] as $error) {
                        if ($error !== 0) {
                            return 'Something went wrong.';
                        }
                    }

                    ## Size
                    foreach ($data['images']['size'] as $size) {
                        if ($size > 5242880) {
                            return 'The image must not be larger than 5 megabytes.';
                        }
                    }

                    ## Type
                    foreach ($data['images']['type'] as $type) {
                        if (!empty($type) && $type !== 'image/jpeg') {
                            return 'Unsupported image format. Only JPEG.';
                        }
                    }
                })($data);

                ## Ingredients and Categories filtering
                $filter_function = function($item) {
                    return filter_var($item, FILTER_VALIDATE_INT, ['options' => ['min_range' => 1]]);
                };

                ## Ingredients Validation
                $data['ingredients'] = array_filter($data['ingredients'], $filter_function);
                if (empty($data['ingredients'])) {
                    $data['validation']['ingredients'] = 'Please select at least one ingredient.';
                }

                ## Categories Validation
                $data['categories'] = array_filter($data['categories'], $filter_function);
                if (empty($data['categories'])) {
                    $data['validation']['categories'] = 'Please select at least one category.';
                }

                ## Descriptipn
                $data['validation']['description'] = (function(& $data) {
                    if (strlen($data['description']) < 2) {
                        return 'Description must not be shorter than 2 characters.';
                    }

                    if (strlen($data['description']) > 10000) {
                        return 'Description must not be longer than 10 000 characters.';
                    }
                })($data);

                ## Title
                $data['validation']['title'] = (function(& $data) {
                    if (strlen($data['title']) < 2) {
                        return 'Title must not be shorter than 2 characters.';
                    }

                    if (strlen($data['title']) > 255) {
                        return 'Title must not be longer than 255 characters.';
                    }
                })($data);

                ## Deleting fields without errors
                $data['validation'] = array_filter($data['validation'], function($value) { return !empty($value); });

                if (empty($data['validation'])) {
                    $result = $model_recipe->add($data);

                    if (!$result) {
                        $data['error'] = 'Something went wrong.';
                    } else {
                        $_SESSION['form_data']['success'] = 'The recipe was successfully added.';
                        $this->response->redirect(Url::getCurrentUrl());
                    }
                }

                $_SESSION['form_data'] = $data;
                $this->response->redirect(Url::getCurrentUrl());
            }
        }
    }
}";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:23:"\ControllerRecipeRecipe";O:35:"phpDocumentor\Reflection\Php\Class_":12:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:23:"\ControllerRecipeRecipe";s:36:" phpDocumentor\Reflection\Fqsen name";s:22:"ControllerRecipeRecipe";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:22:"ControllerRecipeRecipe";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:51:"The controller is responsible for the recipe pages.";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:11:"\Controller";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Controller";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:3:{s:32:"\ControllerRecipeRecipe::index()";O:35:"phpDocumentor\Reflection\Php\Method":10:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:53:"Processing get and post requests on the recipes page.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:44:"phpDocumentor\Reflection\DocBlock\Tags\Param":6:{s:58:" phpDocumentor\Reflection\DocBlock\Tags\Param variableName";s:4:"data";s:56:" phpDocumentor\Reflection\DocBlock\Tags\Param isVariadic";b:0;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Param isReference";b:0;s:7:" * type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:7:" * name";s:5:"param";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * type";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}s:7:" * name";s:6:"return";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:32:"\ControllerRecipeRecipe::index()";s:36:" phpDocumentor\Reflection\Fqsen name";s:5:"index";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:4:"data";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";s:2:"[]";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:17;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:31:"\ControllerRecipeRecipe::show()";O:35:"phpDocumentor\Reflection\Php\Method":10:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:52:"Processing get and post requests on the recipe page.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:44:"phpDocumentor\Reflection\DocBlock\Tags\Param":6:{s:58:" phpDocumentor\Reflection\DocBlock\Tags\Param variableName";s:10:"query_vars";s:56:" phpDocumentor\Reflection\DocBlock\Tags\Param isVariadic";b:0;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Param isReference";b:0;s:7:" * type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:7:" * name";s:5:"param";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * type";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}s:7:" * name";s:6:"return";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:31:"\ControllerRecipeRecipe::show()";s:36:" phpDocumentor\Reflection\Fqsen name";s:4:"show";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:10:"query_vars";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:167;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:30:"\ControllerRecipeRecipe::add()";O:35:"phpDocumentor\Reflection\Php\Method":10:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:56:"Processing get and post requests on the recipe add page.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:44:"phpDocumentor\Reflection\DocBlock\Tags\Param":6:{s:58:" phpDocumentor\Reflection\DocBlock\Tags\Param variableName";s:4:"data";s:56:" phpDocumentor\Reflection\DocBlock\Tags\Param isVariadic";b:0;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Param isReference";b:0;s:7:" * type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:7:" * name";s:5:"param";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * type";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}s:7:" * name";s:6:"return";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:30:"\ControllerRecipeRecipe::add()";s:36:" phpDocumentor\Reflection\Fqsen name";s:3:"add";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:4:"data";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";s:2:"[]";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:321;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:8;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";